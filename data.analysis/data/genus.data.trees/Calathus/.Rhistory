mutate <- which(probs<.001)
pop[mutate] <- pop[mutate] + sample(step, length(mutate), replace=T)
}
}
pop
mu <- .0001
step <- c(-1,1)
samp.prt <- .25
generations <- 5000
probs <- pop <- vector()
N <- 100
x.orig <- 0
lineages <- 1000
pop[1:N] <- x.orig
for(i in 1:generations){
probs <- runif(n = N, min = 0, max = 1)
if(min(probs)<.001){
mutate <- which(probs<.001)
pop[mutate] <- pop[mutate] + sample(step, length(mutate), replace=T)
}
pop <- sample(pop, N, replace=T)
}
pop
mu <- .0001
step <- c(-1,1)
generations <- 5000
probs <- pop <- vector()
N <- 100
x.orig <- 0
lineages <- 1000
pop[1:N] <- x.orig
for(i in 1:generations){
probs <- runif(n = N, min = 0, max = 1)
if(min(probs)<.001){
mutate <- which(probs<.001)
pop[mutate] <- pop[mutate] + sample(step, length(mutate), replace=T)
}
pop <- sample(pop, N, replace=T)
}
pop
mu <- .0001
step <- c(-1,1)
generations <- 50000
probs <- pop <- vector()
N <- 100
x.orig <- 0
lineages <- 1000
pop[1:N] <- x.orig
for(i in 1:generations){
probs <- runif(n = N, min = 0, max = 1)
if(min(probs)<.001){
mutate <- which(probs<.001)
pop[mutate] <- pop[mutate] + sample(step, length(mutate), replace=T)
}
pop <- sample(pop, N, replace=T)
}
pop
mu <- .0001
step <- c(-1,1)
generations <- 50000
probs <- pop <- vector()
N <- 100
x.orig <- 0
lineages <- 1000
pop[1:N] <- x.orig
for(i in 1:generations){
probs <- runif(n = N, min = 0, max = 1)
if(min(probs)<.001){
mutate <- which(probs<.001)
pop[mutate] <- pop[mutate] + sample(step, length(mutate), replace=T)
}
pop <- sample(pop, N, replace=T)
}
pop
mu <- .0001
step <- c(-1,1)
generations <- 50000
probs <- pop <- vector()
N <- 100
x.orig <- 0
lineages <- 1000
pop[1:N] <- x.orig
for(i in 1:generations){
probs <- runif(n = N, min = 0, max = 1)
if(min(probs)<.001){
mutate <- which(probs<.001)
pop[mutate] <- pop[mutate] + sample(step, length(mutate), replace=T)
}
pop <- sample(pop, N, replace=T)
}
pop
mu <- .0001
step <- c(-1,1)
generations <- 50000
probs <- pop <- vector()
N <- 100
x.orig <- 0
lineages <- 1000
pop[1:N] <- x.orig
for(i in 1:generations){
probs <- runif(n = N, min = 0, max = 1)
if(min(probs)<.001){
mutate <- which(probs<.001)
pop[mutate] <- pop[mutate] + sample(step, length(mutate), replace=T)
}
pop <- sample(pop, N, replace=T)
}
pop
mu <- .0001
step <- c(-1,1)
generations <- 50000
probs <- pop <- vector()
N <- 100
x.orig <- 0
lineages <- 1000
pop[1:N] <- x.orig
for(i in 1:generations){
probs <- runif(n = N, min = 0, max = 1)
if(min(probs)<.001){
mutate <- which(probs<.001)
pop[mutate] <- pop[mutate] + sample(step, length(mutate), replace=T)
}
pop <- sample(pop, N, replace=T)
}
pop
mu <- .0001
step <- c(-1,1)
generations <- 5000
probs <- pop <- vector()
N <- 100
x.orig <- 0
pop[1:N] <- x.orig
for(i in 1:generations){
probs <- runif(n = N, min = 0, max = 1)
if(min(probs)<.001){
mutate <- which(probs<.001)
pop[mutate] <- pop[mutate] + sample(step, length(mutate), replace=T)
}
pop <- sample(pop, N, replace=T)
}
pop100 <- vector()
for(k in 1:1000){
mu <- .0001
step <- c(-1,1)
generations <- 5000
probs <- pop <- vector()
N <- 100
x.orig <- 0
pop[1:N] <- x.orig
for(i in 1:generations){
probs <- runif(n = N, min = 0, max = 1)
if(min(probs)<.001){
mutate <- which(probs<.001)
pop[mutate] <- pop[mutate] + sample(step, length(mutate), replace=T)
}
pop <- sample(pop, N, replace=T)
}
pop100[k] <- mean(pop)
print(k)
}
pop1000 <- vector()
for(k in 1:1000){
mu <- .0001
step <- c(-1,1)
generations <- 5000
probs <- pop <- vector()
N <- 1000
x.orig <- 0
pop[1:N] <- x.orig
for(i in 1:generations){
probs <- runif(n = N, min = 0, max = 1)
if(min(probs)<.001){
mutate <- which(probs<.001)
pop[mutate] <- pop[mutate] + sample(step, length(mutate), replace=T)
}
pop <- sample(pop, N, replace=T)
}
pop1000[k] <- mean(pop)
print(k)
}
rm(generations, i, mu, mutate, N, pop, probs, step, x.orig)
rm(k)
hist(pop100)
hist(pop1000)
pop100
var(pop100)
var(pop1000)
pop100a<-pop100
pop1000a<-pop1000
pop100 <- vector()
for(k in 1:1000){
mu <- .0001
step <- c(-1,1)
generations <- 5000
probs <- pop <- vector()
N <- 100
x.orig <- 0
pop[1:N] <- x.orig
for(i in 1:generations){
probs <- runif(n = N, min = 0, max = 1)
if(min(probs)<.001){
mutate <- which(probs<.001)
pop[mutate] <- pop[mutate] + sample(step, length(mutate), replace=T)
}
pop <- sample(pop, N, replace=T)
}
pop100[k] <- mean(pop)
print(k)
}
pop1000 <- vector()
for(k in 1:1000){
mu <- .0001
step <- c(-1,1)
generations <- 5000
probs <- pop <- vector()
N <- 1000
x.orig <- 0
pop[1:N] <- x.orig
for(i in 1:generations){
probs <- runif(n = N, min = 0, max = 1)
if(min(probs)<.001){
mutate <- which(probs<.001)
pop[mutate] <- pop[mutate] + sample(step, length(mutate), replace=T)
}
pop <- sample(pop, N, replace=T)
}
pop1000[k] <- mean(pop)
print(k)
}
rm(k, generations, i, mu, mutate, N, pop, probs, step, x.orig)
small <- c(pop100, pop100a)
large <- c(pop1000, pop1000a)
hist(small)
hist(large)
var(small)
var(large)
mu <- .0001
step <- c(-1,1)
generations <- 20000
x.orig <- 0
pop100 <- pop1000 <- vector()
for(k in 1:1000){
probs <- pop <- vector()
N <- 50
pop[1:N] <- x.orig
for(i in 1:generations){
probs <- runif(n = N, min = 0, max = 1)
if(min(probs)<.001){
mutate <- which(probs<.001)
pop[mutate] <- pop[mutate] + sample(step, length(mutate), replace=T)
}
pop <- sample(pop, N, replace=T)
}
pop100[k] <- mean(pop)
print(k)
}
pop1000 <- vector()
for(k in 1:1000){
probs <- pop <- vector()
N <- 1000
pop[1:N] <- x.orig
for(i in 1:generations){
probs <- runif(n = N, min = 0, max = 1)
if(min(probs)<.001){
mutate <- which(probs<.001)
pop[mutate] <- pop[mutate] + sample(step, length(mutate), replace=T)
}
pop <- sample(pop, N, replace=T)
}
pop1000[k] <- mean(pop)
print(k)
}
rm(k, generations, i, mu, mutate, N, pop, probs, step, x.orig)
help(solve)
help(lm)
inv(.25)
.15/1
1/.25
mu <- alpha <- delta <- vector()
p1  <- c(1,  -1, 0)
p2  <- c(1,   1, 0)
BC1 <- c(1, -.5, .5)
F1  <- c(1,   0, 1)
setwd("~/Desktop/databasefig/version2/verts")
data <- read.csv("verts.csv")
View(data)
data$Karyotype
table(data$Karyotype)
8168-583
1868-583
582/1285
281/1285
134/1285
263/1285
data <- read.csv("inverts.csv")
setwd("~/Desktop/databasefig/version2/inverts")
data <- read.csv("inverts.csv")
View(data)
table(data$Karyotype)
1824+4536+21+361
xy <- 6742
zw<-62
1891->hd
1215->asex
xy+zw+hd+asex
tot->9910
tot<-9910
xy/tot
zw/tot
396/total
396/tot
1891/tot
View(data)
hist(data$X2n)
hist(log(data$X2n))
data$X2n -> nums
nums
log(18)
10^2.89
2.364^2.89
2.78^2.89
hist(log(data$X2n), xaxt="n")
hist(log(data$X2n), xaxt="n", xlab="", breaks=20)
hist(log(data$X2n), xaxt="n", xlab="", breaks=25)
hist(log(data$X2n),xlab="", breaks=25)
expones <- c(0,1,2,3,4,5,6)
e
base <- 2.71828
base ^ expones
round(base ^ expones)
hist(log(data$X2n), xlab="", breaks=25, main="")
hist(log(data$X2n), xaxt="n", xlab="", breaks=25, main="")
expones <- c(0,1,2,3,4,5,6)
base <- 2.71828
round(base ^ expones)
help(axis)
axis(side=1, at=c(0,1,2,3,4,5,6), labels=round(base ^ expones))
hist(log(data$X2n), xaxt="n", xlab="Diploid Chromosome Number", breaks=25, main="")
expones <- c(0,1,2,3,4,5,6)
base <- 2.71828
axis(side=1, at=c(0,1,2,3,4,5,6), labels=round(base ^ expones))
hist(log(data$X2n), xaxt="n", xlab="Diploid Chromosome Number",
col="blue", breaks=25, main="")
expones <- c(0,1,2,3,4,5,6)
base <- 2.71828
axis(side=1, at=c(0,1,2,3,4,5,6), labels=round(base ^ expones))
setwd("~/Desktop/databasefig/version2/verts")
data <- read.csv("verts.csv")
hist(log(data$X2n), xaxt="n", xlab="Diploid Chromosome Number",
col="blue", breaks=25, main="")
View(data)
hist(log(data$X2N), xaxt="n", xlab="Diploid Chromosome Number",
col="blue", breaks=25, main="")
expones <- c(0,1,2,3,4,5,6)
base <- 2.71828
axis(side=1, at=c(0,1,2,3,4,5,6), labels=round(base ^ expones))
hist(log(data$X2N), xlab="Diploid Chromosome Number",
col="blue", breaks=25, main="")
hist(log(data$X2N), xlab="Diploid Chromosome Number",
col="blue", breaks=25, main="", xlim=c(1.5, 5))
hist(log(data$X2N), xlab="Diploid Chromosome Number",
col="blue", breaks=25, main="", xlim=c(1, 5))
expones <- c(1,2,3,4,5)
base <- 2.71828
axis(side=1, at=c(1,2,3,4,5), labels=round(base ^ expones))
hist(log(data$X2N), xaxt="n", xlab="Diploid Chromosome Number",
col="blue", breaks=25, main="", xlim=c(1, 5))
expones <- c(1,2,3,4,5)
base <- 2.71828
axis(side=1, at=c(1,2,3,4,5), labels=round(base ^ expones))
setwd("~/Desktop/Dropbox/SexChromosomes (1)/invertebrates/Hymenoptera analysis/mcmcglmm")
read.csv("pruned.data.844.vers2.csv")->data
View(data)
data <- data[,c(9,10,11,14)]
data
View(data)
complete
foo <- complete.cases(data)
foo
foo.data <- data[foo,]
foo.data
View(foo.data)
plot(x=log(foo.data$colony.size), y=foo.data$chrom.num, col='red')
plot(x=log(as.numeric(foo.data$colony.size)), y=foo.data$chrom.num, col='red')
x <- log(as.numeric(foo.data$colony.size))
y <- foo.data$chrom.num
y <- as.numeric(foo.data$chrom.num)
lm(y ~ x)
foo <- lm(y ~ x)
foo
View(foo.data)
View(foo.data)
low <- foo.data$lowrelated == 1
x <- log(as.numeric(foo.data$colony.size[low]))
y <- as.numeric(foo.data$chrom.num[low])
plot(x, y, col='red')
x <- log(as.numeric(foo.data$colony.size[!low]))
y <- as.numeric(foo.data$chrom.num[!low])
plot(x, y, col='red')
foo <- lm(y ~ x)
foo
help(lm)
summary(foo)
x <- log(as.numeric(foo.data$colony.size[low]))
y <- as.numeric(foo.data$chrom.num[low])
plot(x, y, col='red')
foo <- lm(y ~ x)
summary(foo)
x <- log(as.numeric(foo.data$colony.size[!low]))
y <- as.numeric(foo.data$chrom.num[!low])
points(x, y, col='blue')
low <- foo.data$lowrelated == 1
x <- log(as.numeric(foo.data$colony.size[low]))
y <- as.numeric(foo.data$chrom.num[low])
plot(x, y, col='red', pch=19, xlab='log(colony size)', ylab='chromosome number')
x <- log(as.numeric(foo.data$colony.size[!low]))
y <- as.numeric(foo.data$chrom.num[!low])
points(x, y, col='blue', pch=19)
foo <- lm(y ~ x)
setwd("~/Desktop/Dropbox/papers/chrom.num/data and analysis/not-cherry/genera.analysis/Calathus")
tree <- read.tree('calathus1.tree')
library(ape)
tree <- read.tree('calathus1.tree')
plot(tree)
plot(tree, type='fan', cex=.5)
plot(tree, cex=.5)
data <- read.csv('data..csv')
data <- read.csv('data.csv')
tip.labels(data[,2])
tiplabels(data[,2])
View(data)
tree$tip.labels
tree$tiplabels
tree$tiplabel
tree$tip.label
plot(tree, cex=.5)
data <- read.csv('data.csv')
foo <- vector()
for(i in 1:length(tree$tip.label)){
foo <- data[data[,1] == tree$tip.label[i], 2]
}
tiplabel(foo)
tiplabels(foo)
tree$tip.label[i]
data[,1] == tree$tip.label[i]
plot(tree, cex=.5)
data <- read.csv('data.csv')
foo <- vector()
for(i in 1:length(tree$tip.label)){
foo[i] <- data[data[,1] == tree$tip.label[i], 2]
}
tiplabels(foo)
plot(tree, cex=.5)
help(plot.phylo)
plot(tree, cex=.5, edge.width=3)
plot(tree, cex=.75, edge.width=3)
27*2
plot(tree, cex=.75, label.offset=2, edge.width=3)
plot(tree, cex=.75, show.tip.label=F, edge.width=3)
tiplabels(foo)
help(tiplabels)
tiplabels(foo, frame='none')
plot(tree, cex=.75, show.tip.label=F, edge.width=3)
tiplabels(foo, frame='none')
foo
foo <- foo-1
foo <- foo/2
foo
plot(tree, cex=.75, show.tip.label=F, edge.width=3)
data <- read.csv('data.csv')
foo <- vector()
for(i in 1:length(tree$tip.label)){
foo[i] <- data[data[,1] == tree$tip.label[i], 2]
}
tiplabels(foo, frame='none')
plot(tree, cex=.75, show.tip.label=F, edge.width=3)
tiplabels(foo, frame='none', adj=2)
tiplabels(foo, frame='none', adj=-2)
tiplabels(foo, frame='none', adj=-1)
tiplabels(foo, frame='none', adj=-.5)
plot(tree, cex=.75, show.tip.label=F, edge.width=3)
data <- read.csv('data.csv')
foo <- vector()
for(i in 1:length(tree$tip.label)){
foo[i] <- data[data[,1] == tree$tip.label[i], 2]
}
tiplabels(foo, frame='none', adj=-.5)
foo
foo[4]<- 23
foo[13] <- 37
foo
foo < foo-1
foo <- foo-1
foo
foo[1] <- 34
foo
foo <- foo/2
foo
plot(tree, cex=.75, show.tip.label=F, edge.width=3)
tiplabels(foo, frame='none', adj=-.5)
plot(tree, cex=.75, show.tip.label=T, edge.width=3)
tiplabels(foo, frame='none', adj=-.5)
help(plot.phylo)
plot(tree, cex=.75, show.tip.label=T, adj=2,edge.width=3)
plot(tree, cex=.75, show.tip.label=T, label.offset=2,edge.width=3)
tiplabels(foo, frame='none', adj=-.5)
plot(tree, cex=.75, show.tip.label=T, label.offset=2,edge.width=3)
tiplabels(foo, frame='none', adj=-.3)
plot(tree, cex=.75, show.tip.label=T, label.offset=2.5,edge.width=3)
tiplabels(foo, frame='none', adj=-.3)
plot(tree, cex=.75, show.tip.label=T, label.offset=2.5,edge.width=3)
tiplabels(foo, cex=.75, frame='none', adj=-.3)
