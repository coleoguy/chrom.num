length(tree$tip.label)
tree
View(tdata2)
data <- read.csv("../data/carab.wingless.csv", as.is=T)
trees <- read.nexus("../data/trees.nexus")
tdata2 <- data[,2:3]
row.names(tdata2) <- data[,1]
data <- read.csv("../data/carab.wingless.csv", as.is=T)
tree <- read.nexus("../data/trees.nexus")
tdata2 <- data[,2:3]
row.names(tdata2) <- data[,1]
foo <- treedata(trees[[1]], tdata2)
tree <- foo[[1]]
tdata2 <- foo[[2]]
View(tdata2)
data <- read.csv("../data/carab.wingless.csv", as.is=T)
tree <- read.nexus("../data/trees.nexus")
tdata2 <- data[,2:3]
row.names(tdata2) <- data[,1]
foo <- treedata(tree[[1]], tdata2)
tree <- foo[[1]]
tdata2 <- foo[[2]]
View(tdata2)
is.data.frame(tdata2)
is.matrix(tdata2)
reorderData <- function(tree, data, taxa.names="row names"){
new.data <- data
print("Start")
if(is.vector(data)){
for(i in 1:length(tree$tip.label)){
new.data[i] <- data[which(names(data) == tree$tip.label[i])]
names(new.data)[i] <- names(data)[which(names(data) == tree$tip.label[i])]
}
}
if(is.data.frame(data) || is.matrix(data)){
if(taxa.names == "row names"){
row.names(new.data) <- 1:length(tree$tip.label)
for(i in 1:length(tree$tip.label)){
new.data[i,] <- data[which(row.names(data) == tree$tip.label[i]),]
row.names(data)[i] <- row.names(data[which(row.names(data) == tree$tip.label[i]),])
}
}
if(is.numeric(taxa.names)){
for(i in 1:length(tree$tip.label)){
new.data[i,] <- data[which(data[,taxa.names] == tree$tip.label[i])]
}
}
}
return(new.data)
}
data <- read.csv("../data/carab.wingless.csv", as.is=T)
tree <- read.nexus("../data/trees.nexus")
tdata2 <- data[,2:3]
row.names(tdata2) <- data[,1]
foo <- treedata(tree[[1]], tdata2)
tree <- foo[[1]]
tdata2 <- foo[[2]]
View(tdata2)
data <- read.csv("../data/carab.wingless.csv", as.is=T)
tree <- read.nexus("../data/trees.nexus")
tdata2 <- data[,2:5]
row.names(tdata2) <- data[,1]
foo <- treedata(tree[[1]], tdata2)
tree <- foo[[1]]
tdata2 <- foo[[2]]
View(tdata2)
View(tdata2)
tdata3 <- tdata[,1:4]
tdata3[,4] <- row.names(tdata3)
row.names(tdata3) <- row.names(1:length(tree$tip.label))
tdata3 <- tdata2[,1:4]
tdata3[,4] <- row.names(tdata3)
row.names(tdata3) <- row.names(1:length(tree$tip.label))
View(tdata3)
View(tdata3)
View(tdata3)
tdata1 <- tdata3[,1]
names(tdata1) <- tdata3[,4]
#testing data
data <- read.csv("../data/carab.wingless.csv", as.is=T)
tree <- read.nexus("../data/trees.nexus")
tdata2 <- data[,2:5]
row.names(tdata2) <- data[,1]
foo <- treedata(tree[[1]], tdata2)
tree <- foo[[1]]
tdata2 <- foo[[2]]
tdata3 <- tdata2[,1:4]
tdata3[,4] <- row.names(tdata3)
row.names(tdata3) <- row.names(1:length(tree$tip.label))
tdata1 <- tdata3[,1]
names(tdata1) <- tdata3[,4]
#testing data
data <- read.csv("../data/carab.wingless.csv", as.is=T)
tree <- read.nexus("../data/trees.nexus")
tdata2 <- data[,2:5]
row.names(tdata2) <- data[,1]
foo <- treedata(tree[[1]], tdata2)
tree <- foo[[1]]
tdata2 <- foo[[2]]
tdata3 <- tdata2[,1:4]
tdata3[,4] <- row.names(tdata3)
row.names(tdata3) <- row.names(1:length(tree$tip.label))
tdata1 <- tdata3[,1]
names(tdata1) <- tdata3[,4]
tdata4 <- as.data.frame(tdata2)
tdata5 <- as.data.frame(tdata3)
rm(data, foo)
reorderData <- function(tree, data, taxa.names="row names"){
new.data <- data
print("Start")
if(is.vector(data)){
for(i in 1:length(tree$tip.label)){
new.data[i] <- data[which(names(data) == tree$tip.label[i])]
names(new.data)[i] <- names(data)[which(names(data) == tree$tip.label[i])]
}
}
if(is.data.frame(data) || is.matrix(data)){
if(taxa.names == "row names"){
row.names(new.data) <- 1:length(tree$tip.label)
for(i in 1:length(tree$tip.label)){
new.data[i,] <- data[which(row.names(data) == tree$tip.label[i]),]
row.names(data)[i] <- row.names(data[which(row.names(data) == tree$tip.label[i]),])
}
}
if(is.numeric(taxa.names)){
for(i in 1:length(tree$tip.label)){
new.data[i,] <- data[which(data[,taxa.names] == tree$tip.label[i])]
}
}
}
return(new.data)
}
View(tdata2)
View(tdata3)
View(tdata3)
View(tdata5)
tdata1.new <- reorderData(tree, tdata1)
# matrix row names
tdata2.new <- reorderData(tree, tdata2, taxa.names="row names")
# matrix column for names
tdata3.new <- reorderData(tree, tdata3, taxa.names=4)
# DF row names
tdata4.new <- reorderData(tree, tdata4, taxa.names="row names")
# DF column for names
tdata5.new <- reorderData(tree, tdata5, taxa.names=4)
tdata1.new <- reorderData(tree, tdata1)
tdata1
tdata1.new
tdata3.new <- reorderData(tree, tdata3, taxa.names=4)
View(tdata3.new)
View(tdata3)
tdata2.new <- reorderData(tree, tdata2, taxa.names="row names")
reorderData <- function(tree, data, taxa.names="row names"){
new.data <- data
print("Start")
if(is.vector(data)){
print("Treating as a vector")
for(i in 1:length(tree$tip.label)){
new.data[i] <- data[which(names(data) == tree$tip.label[i])]
names(new.data)[i] <- names(data)[which(names(data) == tree$tip.label[i])]
}
}
if(is.data.frame(data) || is.matrix(data)){
print("treating as DF or Matrix")
if(taxa.names == "row names"){
print("names are in rows")
row.names(new.data) <- 1:length(tree$tip.label)
for(i in 1:length(tree$tip.label)){
new.data[i,] <- data[which(row.names(data) == tree$tip.label[i]),]
row.names(data)[i] <- row.names(data[which(row.names(data) == tree$tip.label[i]),])
}
}
if(is.numeric(taxa.names)){
print("names are in columns")
for(i in 1:length(tree$tip.label)){
new.data[i,] <- data[which(data[,taxa.names] == tree$tip.label[i])]
}
}
}
return(new.data)
}
tdata1.new <- reorderData(tree, tdata1)
tdata2.new <- reorderData(tree, tdata2, taxa.names="row names")
tdata3.new <- reorderData(tree, tdata3, taxa.names=4)
tdata4.new <- reorderData(tree, tdata4, taxa.names="row names")
tdata5.new <- reorderData(tree, tdata5, taxa.names=4)
reorderData <- function(tree, data, taxa.names="row names"){
new.data <- data
print("Start")
if(is.vector(data)){
print("Treating as a vector")
for(i in 1:length(tree$tip.label)){
new.data[i] <- data[which(names(data) == tree$tip.label[i])]
names(new.data)[i] <- names(data)[which(names(data) == tree$tip.label[i])]
}
}
if(is.data.frame(data) || is.matrix(data)){
print("treating as DF or Matrix")
if(taxa.names == "row names"){
print("names are in rows")
row.names(new.data) <- 1:length(tree$tip.label)
for(i in 1:length(tree$tip.label)){
new.data[i,] <- data[which(row.names(data) == tree$tip.label[i]),]
row.names(data)[i] <- row.names(data)[which(row.names(data) == tree$tip.label[i]),]
}
}
if(is.numeric(taxa.names)){
print("names are in columns")
for(i in 1:length(tree$tip.label)){
new.data[i,] <- data[which(data[,taxa.names] == tree$tip.label[i])]
}
}
}
return(new.data)
}
tdata1.new <- reorderData(tree, tdata1)
# matrix row names
tdata2.new <- reorderData(tree, tdata2, taxa.names="row names")
# matrix column for names
tdata3.new <- reorderData(tree, tdata3, taxa.names=4)
# DF row names
tdata4.new <- reorderData(tree, tdata4, taxa.names="row names")
# DF column for names
tdata5.new <- reorderData(tree, tdata5, taxa.names=4)
tdata2.new <- reorderData(tree, tdata2, taxa.names="row names")
reorderData <- function(tree, data, taxa.names="row names"){
new.data <- data
print("Start")
if(is.vector(data)){
print("Treating as a vector")
for(i in 1:length(tree$tip.label)){
new.data[i] <- data[which(names(data) == tree$tip.label[i])]
names(new.data)[i] <- names(data)[which(names(data) == tree$tip.label[i])]
}
}
if(is.data.frame(data) || is.matrix(data)){
print("treating as DF or Matrix")
if(taxa.names == "row names"){
print("names are in rows")
row.names(new.data) <- 1:length(tree$tip.label)
for(i in 1:length(tree$tip.label)){
new.data[i,] <- data[which(row.names(data) == tree$tip.label[i]),]
row.names(data)[i] <- row.names(data)[which(row.names(data) == tree$tip.label[i])]
}
}
if(is.numeric(taxa.names)){
print("names are in columns")
for(i in 1:length(tree$tip.label)){
new.data[i,] <- data[which(data[,taxa.names] == tree$tip.label[i])]
}
}
}
return(new.data)
}
tdata1.new <- reorderData(tree, tdata1)
# matrix row names
tdata2.new <- reorderData(tree, tdata2, taxa.names="row names")
data <- tdata2
new.data <- data
print("Start")
is.vector(data)
is.data.frame(data) || is.matrix(data)
taxa.names == "row names"
new.data <- data
row.names(new.data) <- 1:length(tree$tip.label)
for(i in 1:length(tree$tip.label)){
new.data[i,] <- data[which(row.names(data) == tree$tip.label[i]),]
row.names(data)[i] <- row.names(data)[which(row.names(data) == tree$tip.label[i])]
}
tree$tip.label[i]
row.names(data)
which(row.names(data) == tree$tip.label[i])
data <- tdata1
new.data <- data
for(i in 1:length(tree$tip.label)){
new.data[i] <- data[which(names(data) == tree$tip.label[i])]
names(new.data)[i] <- names(data)[which(names(data) == tree$tip.label[i])]
}
data <- read.csv("../data/carab.wingless.csv", as.is=T)
tree <- read.nexus("../data/trees.nexus")
tdata2 <- data[,2:5]
row.names(tdata2) <- data[,1]
foo <- treedata(tree[[1]], tdata2)
tree <- foo[[1]]
tdata2 <- foo[[2]]
tdata3 <- tdata2[,1:4]
tdata3[,4] <- row.names(tdata3)
row.names(tdata3) <- row.names(1:length(tree$tip.label))
tdata1 <- tdata3[,1]
names(tdata1) <- tdata3[,4]
tdata4 <- as.data.frame(tdata2)
tdata5 <- as.data.frame(tdata3)
rm(data, foo)
View(tdata2)
View(tdata3)
row.names(tdata2) == tdata[,4]
row.names(tdata2) == tdata4[,4]
View(tdata4)
View(tdata2)
View(tdata3)
row.names(tdata2) == tdata3[,4]
names(tdata1) == row.names(tdata2)
tree$tip.label
tree$tip.label %in% names(tdata1)
sum(tree$tip.label %in% names(tdata1))
sum(tree$tip.label %in% row.names(tdata2))
sum(tree$tip.label %in% row.names(tdata4))
sum(tree$tip.label %in% tdata3[,4])
sum(tree$tip.label %in% tdata5[,4])
data <- tdata2
View(data)
i <- 1
which(row.names(data) == tree$tip.label[i])
tree$tip.label[i]
row.names(data)[16]
i <- 15
tree$tip.label[i]
row.names(data) == tree$tip.label[i]
which(row.names(data) == tree$tip.label[i])
data[which(row.names(data) == tree$tip.label[i]),]
reorderData <- function(tree, data, taxa.names="row names"){
new.data <- data
print("Start")
if(is.vector(data)){
print("Treating as a vector")
for(i in 1:length(tree$tip.label)){
new.data[i] <- data[which(names(data) == tree$tip.label[i])]
names(new.data)[i] <- names(data)[which(names(data) == tree$tip.label[i])]
}
}
if(is.data.frame(data) || is.matrix(data)){
print("treating as DF or Matrix")
if(taxa.names == "row names"){
print("names are in rows")
row.names(new.data) <- 1:length(tree$tip.label)
for(i in 1:length(tree$tip.label)){
new.data[i,] <- data[which(row.names(data) == tree$tip.label[i]),]
row.names(new.data)[i] <- row.names(data)[which(row.names(data) == tree$tip.label[i])]
}
}
if(is.numeric(taxa.names)){
print("names are in columns")
for(i in 1:length(tree$tip.label)){
new.data[i,] <- data[which(data[,taxa.names] == tree$tip.label[i])]
}
}
}
return(new.data)
}
#testing data
data <- read.csv("../data/carab.wingless.csv", as.is=T)
tree <- read.nexus("../data/trees.nexus")
tdata2 <- data[,2:5]
row.names(tdata2) <- data[,1]
foo <- treedata(tree[[1]], tdata2)
tree <- foo[[1]]
tdata2 <- foo[[2]]
tdata3 <- tdata2[,1:4]
tdata3[,4] <- row.names(tdata3)
row.names(tdata3) <- row.names(1:length(tree$tip.label))
tdata1 <- tdata3[,1]
names(tdata1) <- tdata3[,4]
tdata4 <- as.data.frame(tdata2)
tdata5 <- as.data.frame(tdata3)
rm(data, foo)
tdata1.new <- reorderData(tree, tdata1)
# matrix row names
tdata2.new <- reorderData(tree, tdata2, taxa.names="row names")
# matrix column for names
tdata3.new <- reorderData(tree, tdata3, taxa.names=4)
# DF row names
tdata4.new <- reorderData(tree, tdata4, taxa.names="row names")
# DF column for names
tdata5.new <- reorderData(tree, tdata5, taxa.names=4)
data <- tdata5
new.data <- data
for(i in 1:length(tree$tip.label)){
new.data[i,] <- data[which(data[,taxa.names] == tree$tip.label[i])]
}
taxa.names=4
for(i in 1:length(tree$tip.label)){
new.data[i,] <- data[which(data[,taxa.names] == tree$tip.label[i])]
}
reorderData <- function(tree, data, taxa.names="row names"){
new.data <- data
print("Start")
if(is.vector(data)){
print("Treating as a vector")
for(i in 1:length(tree$tip.label)){
new.data[i] <- data[which(names(data) == tree$tip.label[i])]
names(new.data)[i] <- names(data)[which(names(data) == tree$tip.label[i])]
}
}
if(is.data.frame(data) || is.matrix(data)){
print("treating as DF or Matrix")
if(taxa.names == "row names"){
print("names are in rows")
row.names(new.data) <- 1:length(tree$tip.label)
for(i in 1:length(tree$tip.label)){
new.data[i,] <- data[which(row.names(data) == tree$tip.label[i]),]
row.names(new.data)[i] <- row.names(data)[which(row.names(data) == tree$tip.label[i])]
}
}
if(is.numeric(taxa.names)){
print("names are in columns")
for(i in 1:length(tree$tip.label)){
new.data[i,] <- data[which(data[,taxa.names] == tree$tip.label[i]),]
}
}
}
return(new.data)
}
#testing data
data <- read.csv("../data/carab.wingless.csv", as.is=T)
tree <- read.nexus("../data/trees.nexus")
tdata2 <- data[,2:5]
row.names(tdata2) <- data[,1]
foo <- treedata(tree[[1]], tdata2)
tree <- foo[[1]]
tdata2 <- foo[[2]]
tdata3 <- tdata2[,1:4]
tdata3[,4] <- row.names(tdata3)
row.names(tdata3) <- row.names(1:length(tree$tip.label))
tdata1 <- tdata3[,1]
names(tdata1) <- tdata3[,4]
tdata4 <- as.data.frame(tdata2)
tdata5 <- as.data.frame(tdata3)
rm(data, foo)
tdata1.new <- reorderData(tree, tdata1)
# matrix row names
tdata2.new <- reorderData(tree, tdata2, taxa.names="row names")
# matrix column for names
tdata3.new <- reorderData(tree, tdata3, taxa.names=4)
# DF row names
tdata4.new <- reorderData(tree, tdata4, taxa.names="row names")
# DF column for names
tdata5.new <- reorderData(tree, tdata5, taxa.names=4)
tdata1 == tree$tip.label
sum(tdata1 == tree$tip.label)
sum(tdata1.new == tree$tip.label)
sum(names(tdata1.new) == tree$tip.label)
sum(names(tdata1) == tree$tip.label)
sum(names(tdata1.new) == tree$tip.label)
View(tdata2)
sum(row.names(tdata2) == tree$tip.label)
sum(row.names(tdata2.new) == tree$tip.label)
sum(row.names(tdata4) == tree$tip.label)
sum(row.names(tdata4.new) == tree$tip.label)
sum(tdata3[,4]) == tree$tip.label)
sum(tdata3[,4] == tree$tip.label)
sum(tdata4.new[,4] == tree$tip.label)
View(tdata4.new)
sum(tdata3.new[,4] == tree$tip.label)
sum(tdata5[,4] == tree$tip.label)
sum(tdata5.new[,4] == tree$tip.label)
data(finch)
library(geiger)
data(finch)
library(arbutus)
data(finch)
phy <- finch$phy
data <- finch$data[,"wingL"]
# we create a second dataset with the order of taxa randomized
data2 <- sample(data, size=13)}
data2 <- sample(data, size=13)
ReorderData <- function(tree, data, taxa.names="row names"){
new.data <- data
print("Start")
if(is.vector(data)){
print("Treating as a vector")
for(i in 1:length(tree$tip.label)){
new.data[i] <- data[which(names(data) == tree$tip.label[i])]
names(new.data)[i] <- names(data)[which(names(data) == tree$tip.label[i])]
}
}
if(is.data.frame(data) || is.matrix(data)){
print("treating as DF or Matrix")
if(taxa.names == "row names"){
print("names are in rows")
row.names(new.data) <- 1:length(tree$tip.label)
for(i in 1:length(tree$tip.label)){
new.data[i,] <- data[which(row.names(data) == tree$tip.label[i]),]
row.names(new.data)[i] <- row.names(data)[which(row.names(data) == tree$tip.label[i])]
}
}
if(is.numeric(taxa.names)){
print("names are in columns")
for(i in 1:length(tree$tip.label)){
new.data[i,] <- data[which(data[,taxa.names] == tree$tip.label[i]),]
}
}
}
return(new.data)
}
data3 <- ReorderData(phy, data2)
names(data2) == names(data3)
names(data1) == names(data3)
names(data) == names(data3)
library(devtools)
install_github('coleoguy/evobir')
library(evobiR)
help(ReorderData)
data(finch)
phy <- finch$phy
data <- finch$data[,"wingL"]
# we create a second dataset with the order of taxa randomized
data <- sample(data, size=13)
names(data) == phy$tip.label ## order is different
data <- ReorderData(phy, data)
names(data) == phy$tip.label ## order is the same
library(devtools)
install_github('coleoguy/evobir')
